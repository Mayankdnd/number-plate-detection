import cv2
import numpy as np
import imutils
import matplotlib.pyplot as plt

#load image
img=cv2.imread('car6.jpg')

#resizing image
img=imutils.resize(img,width=500)

#gray scaling
gray_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.imshow('1. Gray scale img',gray_img)

# Noise removal with iterative bilateral filter(removes noise while preserving edges)
gray_img = cv2.bilateralFilter(gray_img, 11, 17, 17)
cv2.imshow("2 - Bilateral Filter", gray_img)

#finding edges
edges=cv2.Canny(gray_img,170,200)
cv2.imshow("4 - Canny Edges", edges)

# Find contours based on Edges
cnts,h = cv2.findContours(edges.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
cnts=sorted(cnts, key = cv2.contourArea, reverse = True)[:30] #sort contours based on their area keeping minimum required area as '30' (anything smaller than this will not be considered)
NumberPlateCnt = None #we currently have no Number plate contour

# loop over our contours to find the best possible approximate contour of number plate
count = 0
for c in cnts:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:  # Select the contour with 4 corners
            NumberPlateCnt = approx #This is our approx Number Plate Contour
            break


# Drawing the selected contour on the original image
cv2.drawContours(img, [NumberPlateCnt], -1, (0,255,0), 3)
cv2.imshow("Final Image With Number Plate Detected", img)

cv2.waitKey(0) #Wait for user input before closing the images displayed
